"""Test create_table application use case for Users entity """
from logogram.tests.base_test import BaseTestCase
from logogram.users.create_table.create_table import create_user_table
from logogram.users.drop_table.drop_table import drop_user_table
from logogram.flashcards.create_table.create_table import (
    create_flashcards_table)
from logogram.flashcards.drop_table.drop_table import (
    drop_flashcards_table)
from logogram.common.execute_command_fetch_data import (
    execute_command_fetch_data)


class CreateFlashCardsTable(BaseTestCase):

    def setUp(self):
        super(CreateFlashCardsTable, self).setUp()
        create_user_table()
        create_flashcards_table()

    def tearDown(self):
        drop_flashcards_table()
        drop_user_table()

    def test_id_column(self):
        """
        Test that the id column is created with the specified attributes
            - That the id column is of the data type integer
            - That the id column data cannot be Null
            - That the id column is generated by default i.e autoincrements
            - That the id column has a Unique Index i.e an id on each row will
            always be unique
        """
        command = (
            """
            SELECT data_type, is_nullable, identity_generation
            FROM INFORMATION_SCHEMA.COLUMNS
            WHERE table_name = 'flashcards' and column_name='id';
            """)
        data = execute_command_fetch_data(command)
        self.assertEqual(data[0][0], 'integer')
        self.assertEqual(data[0][1], 'NO')
        self.assertEqual(data[0][2], 'BY DEFAULT')
        indices_command = (
            """
            SELECT indexdef
            FROM pg_indexes
            WHERE tablename = 'flashcards' and indexname = 'flashcards_pkey';
            """
        )
        indices_data = execute_command_fetch_data(indices_command)
        id_index_create_command = (
            'CREATE UNIQUE INDEX flashcards_pkey ON public.flashcards'
            ' USING btree (id)')
        self.assertEqual(indices_data[0][0], id_index_create_command)

    def test_name_column(self):
        """
        Test that the name column is created with the specified attributes
            - That the name column type is text
            - That the name column data cannot be Null
        """
        command = (
            """
            SELECT data_type, is_nullable
            FROM INFORMATION_SCHEMA.COLUMNS
            WHERE table_name = 'flashcards' and column_name='name';
            """)
        data = execute_command_fetch_data(command)
        self.assertEqual(data[0][0], 'text')
        self.assertEqual(data[0][1], 'NO')

    def test_description_column(self):
        """
        Test that the description column is created with the specified
        attributes
            - That the description column type is text
            - That the description column data can be Null
        """
        command = (
            """
            SELECT data_type, is_nullable
            FROM INFORMATION_SCHEMA.COLUMNS
            WHERE table_name = 'flashcards' and column_name='description';
            """)
        data = execute_command_fetch_data(command)
        self.assertEqual(data[0][0], 'text')
        self.assertEqual(data[0][1], 'YES')

    def test_users_column(self):
        """
        Test that the users column is created with the specified attributes
            - That the users column type is integer
        """
        command = (
            """
            SELECT data_type
            FROM INFORMATION_SCHEMA.COLUMNS
            WHERE table_name = 'flashcards' and column_name='users';
            """)
        data = execute_command_fetch_data(command)
        self.assertEqual(data[0][0], 'integer')
        foreign_key_command = (
            """
            SELECT constraint_type, enforced
            FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS
            WHERE table_name = 'flashcards'
            AND constraint_name = 'flashcards_users_fkey'
            """
        )
        foreign_key_data = execute_command_fetch_data(foreign_key_command)
        self.assertEqual(foreign_key_data[0][0], 'FOREIGN KEY')
        self.assertEqual(foreign_key_data[0][1], 'YES')
