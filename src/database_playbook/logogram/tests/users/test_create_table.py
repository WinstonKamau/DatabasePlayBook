"""Test create_table application use case for Users entity """
from logogram.tests.base_test import BaseTestCase
from logogram.users.create_table.create_table import create_user_table
from logogram.users.drop_table.drop_table import drop_user_table
from logogram.common.execute.execute_command_fetch_data import (
    ExecuteCommandFetchData)


class CreateUserTable(BaseTestCase):

    def setUp(self):
        super(CreateUserTable, self).setUp()
        create_user_table()

    def tearDown(self):
        drop_user_table()

    def test_id_column(self):
        """
        Test that the id column is created with the specified attributes
            - That the id column is of the data type integer
            - That the id column data cannot be Null
            - That the id column is generated by default i.e autoincrements
            - That the id column has a Unique Index i.e an id on each row will
            always be unique
        """
        command = (
            """
            SELECT data_type, is_nullable, identity_generation
            FROM INFORMATION_SCHEMA.COLUMNS
            WHERE table_name = 'users' and column_name='id';
            """)
        data = ExecuteCommandFetchData().execute_command(command)
        self.assertEqual(data[0][0], 'integer')
        self.assertEqual(data[0][1], 'NO')
        self.assertEqual(data[0][2], 'BY DEFAULT')
        indices_command = (
            """
            SELECT indexdef
            FROM pg_indexes
            WHERE tablename = 'users' and indexname = 'users_pkey';
            """
        )
        indices_data = ExecuteCommandFetchData().execute_command(
            indices_command)
        id_index_create_command = (
            'CREATE UNIQUE INDEX users_pkey ON public.users USING btree (id)')
        self.assertEqual(indices_data[0][0], id_index_create_command)

    def test_password_column(self):
        """
        Test that the password column is created with the specified attributes
            - That the password column type is character varying
            - That the password column data cannot be Null
            - That it has a character maximum length of 128
        """
        command = (
            """
            SELECT data_type, is_nullable, character_maximum_length
            FROM INFORMATION_SCHEMA.COLUMNS
            WHERE table_name = 'users' and column_name='password';
            """)
        data = ExecuteCommandFetchData().execute_command(command)
        self.assertEqual(data[0][0], 'character varying')
        self.assertEqual(data[0][1], 'NO')
        self.assertEqual(data[0][2], 128)

    def test_email_column(self):
        """
        Test that the email column is created with specified attributes
            - That the email column type is character varying
            - That the email column data cannot be Null
            - That the email column has a unique index i.e an email on each
            row will always be unique
        """
        command = (
            """
            SELECT data_type, is_nullable
            FROM INFORMATION_SCHEMA.COLUMNS
            WHERE table_name = 'users' and column_name='email';
            """)
        data = ExecuteCommandFetchData().execute_command(command)
        self.assertEqual(data[0][0], 'text')
        self.assertEqual(data[0][1], 'NO')
        indices_command = (
            """
            SELECT indexdef
            FROM pg_indexes
            WHERE tablename = 'users' and indexname = 'users_email_key';
            """
        )
        indices_data = ExecuteCommandFetchData().execute_command(
            indices_command)
        email_index_create_command = (
            'CREATE UNIQUE INDEX users_email_key ON public.users USING btree'
            ' (email)')
        self.assertEqual(indices_data[0][0], email_index_create_command)

    def test_is_super_user_column(self):
        """
        Test that the is_superuser column is created with specified attributes
            - That the is_superuser column is of the type boolean
            - That the is_superuser column data cannot be Null
            - That the is_superuser column has a default value of false
            when created without any specified data
        """
        command = (
            """
            SELECT data_type, is_nullable, column_default
            FROM INFORMATION_SCHEMA.COLUMNS
            WHERE table_name = 'users' and column_name='is_superuser';
            """)
        data = ExecuteCommandFetchData().execute_command(command)
        self.assertEqual(data[0][0], 'boolean')
        self.assertEqual(data[0][1], 'NO')
        self.assertEqual(data[0][2], 'false')

    def test_first_name_column(self):
        """
        Test that the first_name column is created with specified attributes
            - That the first_name column is of the type character varying
            - That it has a character maximum length of 20
            - That the first_name column data cannot be Null
        """
        command = (
            """
            SELECT data_type, is_nullable, character_maximum_length
            FROM INFORMATION_SCHEMA.COLUMNS
            WHERE table_name = 'users' and column_name='first_name';
            """)
        data = ExecuteCommandFetchData().execute_command(command)
        self.assertEqual(data[0][0], 'character varying')
        self.assertEqual(data[0][1], 'YES')
        self.assertEqual(data[0][2], 20)

    def test_last_name_column(self):
        """
        Test that the last_name column is created with specified attributes
            - That the last_name column is of the type character varying
            - That it has a character maximum length of 20
            - That the last_name column data cannot be Null
        """
        command = (
            """
            SELECT data_type, is_nullable, character_maximum_length
            FROM INFORMATION_SCHEMA.COLUMNS
            WHERE table_name = 'users' and column_name='last_name';
            """)
        data = ExecuteCommandFetchData().execute_command(command)
        self.assertEqual(data[0][0], 'character varying')
        self.assertEqual(data[0][1], 'YES')
        self.assertEqual(data[0][2], 20)

    def test_date_joined_column(self):
        """
        Test that the date_joined column is created with specified attributes
            - That the date_joined column is of the type date
            - That the column is not nullable
            - That it has a default method of now() that creates it if no
            default is granted
        """
        command = (
            """
            SELECT data_type, is_nullable, column_default
            FROM INFORMATION_SCHEMA.COLUMNS
            WHERE table_name = 'users' and column_name='date_joined';
            """)
        data = ExecuteCommandFetchData().execute_command(command)
        self.assertEqual(data[0][0], 'date')
        self.assertEqual(data[0][1], 'NO')
        self.assertEqual(data[0][2], 'now()')

    def test_last_login_date(self):
        """
        Test that the last_login column is created with specified attributes
            - That the date_joined column is of the type date
            - That the date_joined column data cannot be Null
        """
        command = (
            """
            SELECT data_type, is_nullable
            FROM INFORMATION_SCHEMA.COLUMNS
            WHERE table_name = 'users' and column_name='last_login';
            """)
        data = ExecuteCommandFetchData().execute_command(command)
        self.assertEqual(data[0][0], 'date')
        self.assertEqual(data[0][1], 'YES')
